{"version":3,"sources":["parser.ts","components/Nest.tsx","icons/rose.svg","components/Input.tsx","components/Microphone.tsx","App.tsx","index.tsx"],"names":["IntentType","EntityType","Nest","depth","size","speed","scale","text","squat","radius","animation","style","width","height","display","justifyContent","alignItems","backgroundColor","borderRadius","transition","Input","inputDisplay","handleToggleInput","handleSizeChange","handleDepthChange","handleScaleChange","handleSpeedChange","handleSquatChange","handleRadiusChange","handleSquare","handleEllipse","handleCircle","handleRose","handleAnimationChange","handleTextInput","className","onClick","Slider","min","max","step","value","onChange","e","parseInt","target","parseFloat","src","rose","alt","Select","MenuItem","TextField","placeholder","variant","Microphone","React","memo","state","segment","onRecord","enabled","SpeechState","Idle","Ready","Recording","Connecting","Loading","disabled","Transcript","undefined","words","map","w","Word","word","index","isFinal","SpeechIntentValues","Object","values","parseAttributeEntity","attribute","entities","type","Attribute","toLowerCase","App","useState","setDepth","setAnimation","setScale","setSpeed","setSize","setRadius","setSquat","setText","setInputDisplay","useSpeechContext","toggleRecording","speechState","useEffect","parseSegment","handleVoiceIncrease","newSize","newSpeed","newRadius","newSquat","newScale","newDepth","handleVoiceDecrease","intent","includes","Unknown","parseIntent","SetShape","shape","Shape","parseShapeEntity","handleVoiceShape","Increase","attributeInc","Decrease","attributeDec","newAnimation","textInput","ReactDOM","render","StrictMode","appId","language","document","getElementById"],"mappings":"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","file":"static/js/main.d55f02d9.chunk.js","sourcesContent":["import { SpeechSegment } from '@speechly/react-client';\n\nexport enum IntentType {\n  Unknown = 'unknown',\n  SetShape = 'set_shape',\n  Increase = 'increase',\n  Decrease = 'decrease',\n}\n\nexport enum EntityType {\n  Shape = 'shape',\n  Attribute = 'attribute',\n}\n\nconst SpeechIntentValues = Object.values(IntentType) as string[];\n\nexport function parseIntent(segment: SpeechSegment): IntentType {\n  const { intent } = segment;\n\n  if (SpeechIntentValues.includes(intent.intent)) {\n    return intent.intent as IntentType;\n  }\n\n  return IntentType.Unknown;\n}\n\nexport function parseShapeEntity(segment: SpeechSegment): string | undefined {\n  let shape;\n  for (const e of segment.entities) {\n    if (e.type === EntityType.Shape) {\n      shape = e.value.toLowerCase();\n      return shape;\n    }\n  }\n  return shape;\n}\n\nexport function parseAttributeEntity(\n  segment: SpeechSegment\n): string | undefined {\n  let attribute;\n  for (const e of segment.entities) {\n    if (e.type === EntityType.Attribute) {\n      attribute = e.value.toLowerCase();\n      return attribute;\n    }\n  }\n  return attribute;\n}\n","import './nest.css';\n\ntype Props = {\n  depth: number;\n  size: number;\n  speed: number;\n  scale: number;\n  text: string;\n  squat: number;\n  radius: number;\n  animation: string;\n};\n\nexport const Nest = ({\n  depth,\n  size,\n  speed,\n  scale,\n  text,\n  squat,\n  radius,\n  animation,\n}: Props): JSX.Element | null => {\n  if (depth < 1) return null;\n\n  const style = {\n    width: `${size}rem`,\n    height: `${size / squat}rem`,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    animation: `${animation} ${speed}s linear infinite`,\n    backgroundColor: 'white',\n    borderRadius: `${radius}%`,\n    transition: 'border-radius 1s, width 1s, height 1s',\n  };\n\n  return (\n    <div style={style}>\n      {text}\n      <Nest\n        depth={(depth -= 1)}\n        size={(size *= scale)}\n        speed={speed}\n        scale={scale}\n        text={text}\n        squat={squat}\n        radius={radius}\n        animation={animation}\n      />\n    </div>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/rose.3ffb1699.svg\";","import { Slider, Select, MenuItem, TextField } from '@mui/material';\nimport rose from '../icons/rose.svg';\nimport './input.css';\n\ntype Props = {\n  inputDisplay: boolean;\n  handleToggleInput: () => void;\n  size: number;\n  handleSizeChange: (newSize: number) => void;\n  depth: number;\n  handleDepthChange: (newDepth: number) => void;\n  scale: number;\n  handleScaleChange: (newScale: number) => void;\n  speed: number;\n  handleSpeedChange: (newSpeed: number) => void;\n  squat: number;\n  handleSquatChange: (newSquat: number) => void;\n  radius: number;\n  handleRadiusChange: (newRadius: number) => void;\n  handleSquare: () => void;\n  handleEllipse: () => void;\n  handleCircle: () => void;\n  handleRose: () => void;\n  animation: string;\n  handleAnimationChange: (newAnimation: string) => void;\n  text: string;\n  handleTextInput: (newTextInput: string) => void;\n};\n\nexport const Input = ({\n  inputDisplay,\n  handleToggleInput,\n  size,\n  handleSizeChange,\n  depth,\n  handleDepthChange,\n  scale,\n  handleScaleChange,\n  speed,\n  handleSpeedChange,\n  squat,\n  handleSquatChange,\n  radius,\n  handleRadiusChange,\n  handleSquare,\n  handleEllipse,\n  handleCircle,\n  handleRose,\n  animation,\n  handleAnimationChange,\n  text,\n  handleTextInput,\n}: Props) => {\n  return (\n    <div className={`input-container ${inputDisplay ? '' : 'hidden'}`}>\n      <button className=\"toggle-input-button\" onClick={handleToggleInput}>\n        Hide\n      </button>\n      <div className=\"sliders\">\n        <div className=\"slider-wrapper\">\n          <span>Size</span>\n          <Slider\n            min={10}\n            max={50}\n            step={1}\n            value={size}\n            onChange={(e) =>\n              handleSizeChange(parseInt((e.target as HTMLInputElement)!.value))\n            }\n          />\n        </div>\n        <div className=\"slider-wrapper\">\n          <span>Depth</span>\n          <Slider\n            min={1}\n            max={60}\n            step={1}\n            value={depth}\n            onChange={(e) =>\n              handleDepthChange(parseInt((e.target as HTMLInputElement)!.value))\n            }\n          />\n        </div>\n        <div className=\"slider-wrapper\">\n          <span>Scale</span>\n          <Slider\n            min={0.7}\n            max={0.9}\n            step={0.01}\n            value={scale}\n            onChange={(e) =>\n              handleScaleChange(\n                parseFloat((e.target as HTMLInputElement)!.value)\n              )\n            }\n          />\n        </div>\n        <div className=\"slider-wrapper\">\n          <span>Loop Time</span>\n          <Slider\n            min={5}\n            max={50}\n            step={1}\n            value={speed}\n            onChange={(e) =>\n              handleSpeedChange(parseInt((e.target as HTMLInputElement)!.value))\n            }\n          />\n        </div>\n        <div className=\"slider-wrapper\">\n          <span>Squat</span>\n          <Slider\n            min={1}\n            max={10}\n            value={squat}\n            step={0.2}\n            onChange={(e) =>\n              handleSquatChange(parseInt((e.target as HTMLInputElement)!.value))\n            }\n          />\n        </div>\n        <div className=\"slider-wrapper\">\n          <span>Border Radius</span>\n          <Slider\n            min={0}\n            max={50}\n            value={radius}\n            step={2}\n            onChange={(e) =>\n              handleRadiusChange(\n                parseInt((e.target as HTMLInputElement)!.value)\n              )\n            }\n          />\n        </div>\n      </div>\n      <div className=\"buttons-et-al\">\n        <div className=\"shape-buttons\">\n          <button\n            className=\"shape-button square\"\n            onClick={handleSquare}\n          ></button>\n          <button\n            className=\"shape-button ellipse\"\n            onClick={handleEllipse}\n          ></button>\n          <button\n            className=\"shape-button circle\"\n            onClick={handleCircle}\n          ></button>\n          <button className=\"rose\" onClick={handleRose}>\n            <img className=\"rose\" src={rose} alt=\"rose\"></img>\n          </button>\n        </div>\n        <div className=\"text-and-animation\">\n          <Select\n            value={animation}\n            onChange={(e) => handleAnimationChange(e.target.value)}\n          >\n            <MenuItem value={'spin'}>Spin</MenuItem>\n            <MenuItem value={'scan'}>Scan</MenuItem>\n            <MenuItem value={'coil'}>Coil</MenuItem>\n          </Select>\n          <TextField\n            placeholder={'Add a word...'}\n            value={text}\n            variant=\"outlined\"\n            onChange={(e) => handleTextInput(e.target.value)}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport {\n  Word as SpeechWord,\n  SpeechSegment,\n  SpeechState,\n} from '@speechly/react-client';\n\ntype Props = {\n  segment?: SpeechSegment;\n  state: SpeechState;\n  onRecord: () => Promise<void>;\n};\n\nexport const Microphone = React.memo(\n  ({ state, segment, onRecord }: Props): JSX.Element => {\n    let enabled = false;\n    let text = 'Error';\n\n    switch (state) {\n      case SpeechState.Idle:\n      case SpeechState.Ready:\n        enabled = true;\n        text = 'Start';\n        break;\n      case SpeechState.Recording:\n        enabled = true;\n        text = 'Stop';\n        break;\n      case SpeechState.Connecting:\n      case SpeechState.Loading:\n        enabled = false;\n        text = 'Loading...';\n        break;\n    }\n\n    return (\n      <div>\n        <button onClick={onRecord} disabled={!enabled}>\n          {text}\n        </button>\n        <Transcript segment={segment} />\n      </div>\n    );\n  }\n);\n\nconst Transcript = React.memo(\n  ({ segment }: { segment?: SpeechSegment }): JSX.Element => {\n    if (segment === undefined) {\n      return (\n        <div>\n          <em>Waiting for speech input...</em>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        {segment.words.map((w) => (\n          <Word word={w} key={w.index} />\n        ))}\n      </div>\n    );\n  }\n);\n\nconst Word = React.memo(({ word }: { word: SpeechWord }): JSX.Element => {\n  if (word.isFinal) {\n    return <strong>{`${word.value} `}</strong>;\n  }\n\n  return <span>{`${word.value} `}</span>;\n});\n","import { useEffect } from 'react';\nimport './App.css';\nimport { Nest } from './components/Nest';\nimport { Input } from './components/Input';\nimport { useState } from 'react';\nimport { Microphone } from './components/Microphone';\nimport { useSpeechContext, SpeechSegment } from '@speechly/react-client';\nimport {\n  IntentType,\n  parseIntent,\n  parseAttributeEntity,\n  parseShapeEntity,\n} from './parser';\n\n//test comment\n\nfunction App() {\n  const [depth, setDepth] = useState(40);\n  const [animation, setAnimation] = useState('spin');\n  const [scale, setScale] = useState(0.8);\n  const [speed, setSpeed] = useState(40);\n  const [size, setSize] = useState(25);\n  const [radius, setRadius] = useState(0);\n  const [squat, setSquat] = useState(1);\n  const [text, setText] = useState('');\n  const [inputDisplay, setInputDisplay] = useState(true);\n\n  const { toggleRecording, speechState, segment } = useSpeechContext();\n\n  useEffect(() => {\n    if (segment === undefined) return;\n\n    parseSegment(segment);\n  }, [segment]);\n\n  const handleDepthChange = (newDepth: number) => {\n    setDepth(newDepth);\n  };\n\n  const handleScaleChange = (newScale: number) => {\n    setScale(newScale);\n  };\n\n  const handleSpeedChange = (newSpeed: number) => {\n    setSpeed(newSpeed);\n  };\n\n  const handleSizeChange = (newSize: number) => {\n    setSize(newSize);\n  };\n\n  const handleSquatChange = (newSquat: number) => {\n    setSquat(newSquat);\n  };\n\n  const handleRadiusChange = (newRadius: number) => {\n    setRadius(newRadius);\n  };\n\n  const handleTextInput = (textInput: string) => {\n    setText(textInput);\n  };\n\n  const handleAnimationChange = (newAnimation: string) => {\n    setAnimation(newAnimation);\n  };\n\n  const handleToggleInput = () => {\n    setInputDisplay(!inputDisplay);\n  };\n\n  const handleEllipse = () => {\n    setRadius(50);\n    setSquat(2);\n  };\n\n  const handleSquare = () => {\n    setRadius(0);\n    setSquat(1);\n  };\n\n  const handleCircle = () => {\n    setRadius(50);\n    setSquat(1);\n  };\n\n  const handleRose = () => {\n    setRadius(50);\n    setSquat(1.2);\n  };\n\n  const increaseSize = () => {\n    setSize((size) => {\n      const newSize = size * 1.1;\n      return newSize > 50 ? 50 : newSize;\n    });\n  };\n\n  const decreaseSize = () => {\n    setSize((size) => {\n      const newSize = size * 0.9;\n      return newSize < 10 ? 10 : newSize;\n    });\n  };\n\n  const increaseSpeed = () => {\n    setSpeed((speed) => {\n      const newSpeed = speed * 0.9;\n      return newSpeed < 5 ? 5 : newSpeed;\n    });\n  };\n\n  const decreaseSpeed = () => {\n    setSpeed((speed) => {\n      const newSpeed = speed * 1.1;\n      return newSpeed > 50 ? 50 : newSpeed;\n    });\n  };\n\n  const increaseBorderRadius = () => {\n    setRadius((radius) => {\n      if (radius === 0) return 10;\n      const newRadius = radius + 10;\n      if (newRadius > 50) return 50;\n      return newRadius;\n    });\n  };\n\n  const decreaseBorderRadius = () => {\n    setRadius((radius) => {\n      const newRadius = radius - 10;\n      return newRadius < 1 ? 0 : newRadius;\n    });\n  };\n\n  const increaseSquat = () => {\n    setSquat((squat) => {\n      const newSquat = squat + 2;\n      return newSquat > 10 ? 10 : newSquat;\n    });\n  };\n\n  const decreaseSquat = () => {\n    setSquat((squat) => {\n      const newSquat = squat - 2;\n      return newSquat < 1 ? 1 : newSquat;\n    });\n  };\n\n  const increaseScale = () => {\n    setScale((scale) => {\n      const newScale = scale + 0.02;\n      return newScale > 0.9 ? 0.9 : newScale;\n    });\n  };\n\n  const decreaseScale = () => {\n    setScale((scale) => {\n      const newScale = scale - 0.02;\n      return newScale > 0.7 ? 0.7 : newScale;\n    });\n  };\n\n  const increaseDepth = () => {\n    setDepth((depth) => {\n      const newDepth = depth + 10;\n      return newDepth > 60 ? 60 : newDepth;\n    });\n  };\n\n  const decreaseDepth = () => {\n    setDepth((depth) => {\n      const newDepth = depth - 5;\n      return newDepth < 1 ? 1 : newDepth;\n    });\n  };\n\n  const handleVoiceShape = (shape: string | undefined) => {\n    if (shape === undefined) return;\n\n    switch (shape) {\n      case 'square':\n        handleSquare();\n        break;\n      case 'ellipse':\n        handleEllipse();\n        break;\n      case 'circle':\n        handleCircle();\n        break;\n      case 'rose':\n        handleRose();\n        break;\n    }\n  };\n\n  const handleVoiceIncrease = (attribute: string | undefined) => {\n    if (attribute === undefined) return;\n\n    switch (attribute) {\n      case 'size':\n        increaseSize();\n        break;\n      case 'speed':\n        increaseSpeed();\n        break;\n      case 'roundness':\n        increaseBorderRadius();\n        break;\n      case 'squat':\n        increaseSquat();\n        break;\n      case 'scale':\n        increaseScale();\n        break;\n      case 'depth':\n        increaseDepth();\n        break;\n    }\n  };\n\n  const handleVoiceDecrease = (attribute: string | undefined) => {\n    if (attribute === undefined) return;\n\n    switch (attribute) {\n      case 'size':\n        decreaseSize();\n        break;\n      case 'speed':\n        decreaseSpeed();\n        break;\n      case 'roundness':\n        decreaseBorderRadius();\n        break;\n      case 'squat':\n        decreaseSquat();\n        break;\n      case 'scale':\n        decreaseScale();\n        break;\n      case 'depth':\n        decreaseDepth();\n        break;\n    }\n  };\n\n  const parseSegment = (segment: SpeechSegment) => {\n    const intent = parseIntent(segment);\n\n    switch (intent) {\n      case IntentType.SetShape:\n        const shape = parseShapeEntity(segment);\n        handleVoiceShape(shape);\n        break;\n      case IntentType.Increase:\n        const attributeInc = parseAttributeEntity(segment);\n        handleVoiceIncrease(attributeInc);\n        break;\n      case IntentType.Decrease:\n        const attributeDec = parseAttributeEntity(segment);\n        handleVoiceDecrease(attributeDec);\n        break;\n    }\n  };\n\n  return (\n    <div className=\"app-wrapper\">\n      {inputDisplay ? null : (\n        <i\n          onClick={handleToggleInput}\n          className=\"fas fa-paint-brush display-input\"\n        ></i>\n      )}\n      <div className=\"main-container\">\n        <Input\n          inputDisplay={inputDisplay}\n          handleToggleInput={handleToggleInput}\n          size={size}\n          handleSizeChange={handleSizeChange}\n          depth={depth}\n          handleDepthChange={handleDepthChange}\n          scale={scale}\n          handleScaleChange={handleScaleChange}\n          speed={speed}\n          handleSpeedChange={handleSpeedChange}\n          squat={squat}\n          handleSquatChange={handleSquatChange}\n          radius={radius}\n          handleRadiusChange={handleRadiusChange}\n          handleSquare={handleSquare}\n          handleEllipse={handleEllipse}\n          handleCircle={handleCircle}\n          handleRose={handleRose}\n          animation={animation}\n          handleAnimationChange={handleAnimationChange}\n          text={text}\n          handleTextInput={handleTextInput}\n        />\n        <div className={inputDisplay ? 'centered-with-input' : 'centered'}>\n          <Nest\n            depth={depth}\n            size={size}\n            speed={speed}\n            scale={scale}\n            text={text}\n            squat={squat}\n            radius={radius}\n            animation={animation}\n          />\n        </div>\n      </div>\n      <Microphone\n        segment={segment}\n        state={speechState}\n        onRecord={toggleRecording}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { SpeechProvider } from '@speechly/react-client';\n\nReactDOM.render(\n  <React.StrictMode>\n    <SpeechProvider\n      appId=\"7ba0fae0-8f15-4bda-89ab-b6b592a85fdf\"\n      language=\"en-US\"\n    >\n      <App />\n    </SpeechProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}