{"version":3,"sources":["parser.ts","components/Nest.tsx","helpers/handleColorIteration.tsx","helpers/getCurrentStyle.tsx","icons/rose.svg","components/Colors.tsx","components/Input.tsx","components/Microphone.tsx","App.tsx","helpers/cycleColor.tsx","index.tsx"],"names":["IntentType","EntityType","Nest","depth","size","speed","scale","text","squat","radius","animation","ripple","rippleDelay","baseRippleTime","backgroundColors","currentColorIndex","useState","rippleOut","setRippleOut","intervalRef","useRef","useEffect","current","window","clearInterval","setTimeout","id","setInterval","colors","index","length","currentColor","nextColorIndex","style","backgroundColor","currentAnimation","currentShadow","width","height","display","justifyContent","alignItems","borderRadius","transition","boxShadow","getCurrentStyle","Colors","handleAddBgColor","handleRemoveBgColor","bgChips","map","color","Chip","sx","minWidth","onDelete","maxWidth","flexWrap","maxHeight","overflow","type","onInput","e","target","value","Input","inputDisplay","handleToggleInput","handleSizeChange","handleDepthChange","handleScaleChange","handleSpeedChange","handleSquatChange","handleRadiusChange","handleToggleRipple","handleRippleDelayChange","handleSquare","handleEllipse","handleCircle","handleRose","handleAnimationChange","handleTextInput","handleToggleColorCycle","isCyclingBgColor","handleBgColorPattern","bgColorCyclePattern","handleBgColorCycleSpeedChange","bgColorCycleSpeed","className","onClick","Slider","min","max","step","onChange","parseInt","parseFloat","src","rose","alt","FormControlLabel","control","Switch","checked","label","labelPlacement","Select","MenuItem","TextField","placeholder","variant","Microphone","React","memo","state","segment","onRecord","enabled","SpeechState","Idle","Ready","Recording","Connecting","Loading","disabled","Transcript","undefined","words","w","Word","word","isFinal","SpeechIntentValues","Object","values","parseAttributeEntity","attribute","entities","Attribute","toLowerCase","App","setDepth","setAnimation","setScale","setSpeed","setSize","setRadius","setSquat","setText","setInputDisplay","setRipple","setRippleDelay","setBackgroundColors","setIsCyclingBgColor","setBgColorCyclePattern","setBgColorCycleSpeed","cycleIntervalRef","useSpeechContext","toggleRecording","speechState","parseSegment","handleCycleBgColorInward","prevColors","colorsCopy","last","pop","unshift","cycleColorInward","handleCycleBgColorOutward","first","shift","push","cycleColorOutward","handleVoiceIncrease","newSize","newSpeed","newRadius","newSquat","newScale","newDepth","handleVoiceDecrease","intent","includes","Unknown","parseIntent","SetShape","shape","Shape","parseShapeEntity","handleVoiceShape","Increase","attributeInc","Decrease","attributeDec","handleColorCycle","newTime","newAnimation","textInput","noDupes","Set","Array","from","newColors","filter","curColor","pattern","ReactDOM","render","StrictMode","appId","language","document","getElementById"],"mappings":"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","file":"static/js/main.0e7283aa.chunk.js","sourcesContent":["import { SpeechSegment } from '@speechly/react-client';\n\nexport enum IntentType {\n  Unknown = 'unknown',\n  SetShape = 'set_shape',\n  Increase = 'increase',\n  Decrease = 'decrease',\n}\n\nexport enum EntityType {\n  Shape = 'shape',\n  Attribute = 'attribute',\n}\n\nconst SpeechIntentValues = Object.values(IntentType) as string[];\n\nexport function parseIntent(segment: SpeechSegment): IntentType {\n  const { intent } = segment;\n\n  if (SpeechIntentValues.includes(intent.intent)) {\n    return intent.intent as IntentType;\n  }\n\n  return IntentType.Unknown;\n}\n\nexport function parseShapeEntity(segment: SpeechSegment): string | undefined {\n  let shape;\n  for (const e of segment.entities) {\n    if (e.type === EntityType.Shape) {\n      shape = e.value.toLowerCase();\n      return shape;\n    }\n  }\n  return shape;\n}\n\nexport function parseAttributeEntity(\n  segment: SpeechSegment\n): string | undefined {\n  let attribute;\n  for (const e of segment.entities) {\n    if (e.type === EntityType.Attribute) {\n      attribute = e.value.toLowerCase();\n      return attribute;\n    }\n  }\n  return attribute;\n}\n","import { useEffect, useState, useRef } from 'react';\nimport { getCurrentStyle } from '../helpers/getCurrentStyle';\nimport { handleColorIteration } from '../helpers/handleColorIteration';\nimport './nest.css';\n\ntype Props = {\n  depth: number;\n  size: number;\n  speed: number;\n  scale: number;\n  text: string;\n  squat: number;\n  radius: number;\n  animation: string;\n  ripple: boolean;\n  rippleDelay: number;\n  baseRippleTime: number;\n  backgroundColors: string[];\n  currentColorIndex: number;\n};\n\nexport const Nest = ({\n  depth,\n  size,\n  speed,\n  scale,\n  text,\n  squat,\n  radius,\n  animation,\n  ripple,\n  rippleDelay,\n  baseRippleTime,\n  backgroundColors,\n  currentColorIndex,\n}: Props): JSX.Element | null => {\n  const [rippleOut, setRippleOut] = useState(false);\n  const intervalRef: { current: number | null } = useRef(null);\n\n  useEffect(() => {\n    const handleRipple = () => {\n      if (intervalRef.current) window.clearInterval(intervalRef.current);\n\n      if (ripple) {\n        window.setTimeout(() => {\n          const id = window.setInterval(() => {\n            setRippleOut((rippleOut) => !rippleOut);\n          }, 1200);\n\n          intervalRef.current = id;\n          return;\n        }, baseRippleTime);\n      }\n    };\n\n    handleRipple();\n  }, [ripple, rippleDelay, baseRippleTime]);\n\n  if (depth < 1) return null;\n\n  const { currentColor, nextColorIndex } = handleColorIteration(\n    backgroundColors,\n    currentColorIndex\n  );\n\n  const style = getCurrentStyle(\n    size,\n    squat,\n    animation,\n    speed,\n    radius,\n    rippleOut,\n    currentColor\n  );\n\n  return (\n    <div style={style}>\n      {text}\n      <Nest\n        depth={(depth -= 1)}\n        size={(size *= scale)}\n        speed={speed}\n        scale={scale}\n        text={text}\n        squat={squat}\n        radius={radius}\n        animation={animation}\n        ripple={ripple}\n        rippleDelay={rippleDelay}\n        baseRippleTime={(baseRippleTime += rippleDelay)}\n        backgroundColors={backgroundColors}\n        currentColorIndex={nextColorIndex}\n      />\n    </div>\n  );\n};\n","export const handleColorIteration = (colors: string[], index: number) => {\n  if (index === colors.length - 1)\n    return {\n      currentColor: colors[index],\n      nextColorIndex: 0,\n    };\n\n  return {\n    currentColor: colors[index],\n    nextColorIndex: (index += 1),\n  };\n};\n","export const getCurrentStyle = (\n  size: number,\n  squat: number,\n  animation: string,\n  speed: number,\n  radius: number,\n  rippleOut: boolean,\n  backgroundColor: string\n) => {\n  const currentAnimation =\n    animation === 'none' ? 'none' : `${animation} ${speed}s linear infinite`;\n\n  const currentShadow =\n    animation === 'none'\n      ? '5px 5px 16px #5a5a5a, -5px -5px 16px #ffffff'\n      : 'none';\n\n  const currentWidth = `${rippleOut ? size * 1.2 : size}rem`;\n\n  const currentHeight = `${rippleOut ? (size * 1.2) / squat : size / squat}rem`;\n\n  const style = {\n    backgroundColor,\n    width: currentWidth,\n    height: currentHeight,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    animation: currentAnimation,\n    borderRadius: `${radius}%`,\n    transition: 'border-radius 1s, width 1s, height 1s',\n    boxShadow: currentShadow,\n  };\n\n  return style;\n};\n","export default __webpack_public_path__ + \"static/media/rose.3ffb1699.svg\";","import { Chip } from '@mui/material';\n\ntype ColorsProps = {\n  handleAddBgColor: (color: string) => void;\n  handleRemoveBgColor: (color: string) => void;\n  backgroundColors: string[];\n};\n\nexport const Colors: React.FC<ColorsProps> = ({\n  handleAddBgColor,\n  handleRemoveBgColor,\n  backgroundColors,\n}) => {\n  const bgChips = backgroundColors.map((color) => {\n    return (\n      <Chip\n        sx={{ backgroundColor: color, minWidth: null }}\n        onDelete={() => handleRemoveBgColor(color)}\n      />\n    );\n  });\n\n  const handleColorChange = (e: any) => {\n    handleAddBgColor(e.target.value);\n  };\n\n  const currentColor = backgroundColors.length\n    ? backgroundColors[backgroundColors.length - 1]\n    : '#ffffff';\n\n  return (\n    <div>\n      <p>Background Colors</p>\n      <div\n        style={{\n          display: 'flex',\n          maxWidth: '10rem',\n          flexWrap: 'wrap',\n          maxHeight: '6rem',\n          overflow: 'scroll',\n        }}\n      >\n        {bgChips}\n      </div>\n      <input type=\"color\" onInput={handleColorChange} value={currentColor} />\n      <p>Shadow Colors</p>\n      <input type=\"color\" />\n    </div>\n  );\n};\n","import {\n  Slider,\n  Select,\n  MenuItem,\n  TextField,\n  FormControlLabel,\n  Switch,\n} from '@mui/material';\nimport rose from '../icons/rose.svg';\nimport { Colors } from './Colors';\nimport './input.css';\n\ntype Props = {\n  inputDisplay: boolean;\n  handleToggleInput: () => void;\n  size: number;\n  handleSizeChange: (newSize: number) => void;\n  depth: number;\n  handleDepthChange: (newDepth: number) => void;\n  scale: number;\n  handleScaleChange: (newScale: number) => void;\n  speed: number;\n  handleSpeedChange: (newSpeed: number) => void;\n  squat: number;\n  handleSquatChange: (newSquat: number) => void;\n  radius: number;\n  handleRadiusChange: (newRadius: number) => void;\n  ripple: boolean;\n  handleToggleRipple: () => void;\n  handleRippleDelayChange: (newTime: number) => void;\n  rippleDelay: number;\n  handleSquare: () => void;\n  handleEllipse: () => void;\n  handleCircle: () => void;\n  handleRose: () => void;\n  animation: string;\n  handleAnimationChange: (newAnimation: string) => void;\n  text: string;\n  handleTextInput: (newTextInput: string) => void;\n  handleAddBgColor: (color: string) => void;\n  handleRemoveBgColor: (color: string) => void;\n  backgroundColors: string[];\n  handleToggleColorCycle: () => void;\n  isCyclingBgColor: boolean;\n  handleBgColorPattern: (pattern: string) => void;\n  bgColorCyclePattern: string;\n  bgColorCycleSpeed: number;\n  handleBgColorCycleSpeedChange: (newSpeed: number) => void;\n};\n\nexport const Input = ({\n  inputDisplay,\n  handleToggleInput,\n  size,\n  handleSizeChange,\n  depth,\n  handleDepthChange,\n  scale,\n  handleScaleChange,\n  speed,\n  handleSpeedChange,\n  squat,\n  handleSquatChange,\n  radius,\n  handleRadiusChange,\n  ripple,\n  handleToggleRipple,\n  rippleDelay,\n  handleRippleDelayChange,\n  handleSquare,\n  handleEllipse,\n  handleCircle,\n  handleRose,\n  animation,\n  handleAnimationChange,\n  text,\n  handleTextInput,\n  handleAddBgColor,\n  handleRemoveBgColor,\n  backgroundColors,\n  handleToggleColorCycle,\n  isCyclingBgColor,\n  handleBgColorPattern,\n  bgColorCyclePattern,\n  handleBgColorCycleSpeedChange,\n  bgColorCycleSpeed,\n}: Props) => {\n  return (\n    <div className={`input-container ${inputDisplay ? '' : 'hidden'}`}>\n      <button className=\"toggle-input-button\" onClick={handleToggleInput}>\n        Hide\n      </button>\n      <div className=\"sliders\">\n        <div className=\"slider-wrapper\">\n          <span>Size</span>\n          <Slider\n            min={10}\n            max={50}\n            step={1}\n            value={size}\n            onChange={(e) =>\n              handleSizeChange(parseInt((e.target as HTMLInputElement)!.value))\n            }\n          />\n        </div>\n        <div className=\"slider-wrapper\">\n          <span>Depth</span>\n          <Slider\n            min={1}\n            max={60}\n            step={1}\n            value={depth}\n            onChange={(e) =>\n              handleDepthChange(parseInt((e.target as HTMLInputElement)!.value))\n            }\n          />\n        </div>\n        <div className=\"slider-wrapper\">\n          <span>Scale</span>\n          <Slider\n            min={0.7}\n            max={0.9}\n            step={0.01}\n            value={scale}\n            onChange={(e) =>\n              handleScaleChange(\n                parseFloat((e.target as HTMLInputElement)!.value)\n              )\n            }\n          />\n        </div>\n        <div className=\"slider-wrapper\">\n          <span>Loop Time</span>\n          <Slider\n            min={5}\n            max={50}\n            step={1}\n            value={speed}\n            onChange={(e) =>\n              handleSpeedChange(parseInt((e.target as HTMLInputElement)!.value))\n            }\n          />\n        </div>\n        <div className=\"slider-wrapper\">\n          <span>Squat</span>\n          <Slider\n            min={1}\n            max={10}\n            value={squat}\n            step={0.2}\n            onChange={(e) =>\n              handleSquatChange(parseInt((e.target as HTMLInputElement)!.value))\n            }\n          />\n        </div>\n        <div className=\"slider-wrapper\">\n          <span>Border Radius</span>\n          <Slider\n            min={0}\n            max={50}\n            value={radius}\n            step={2}\n            onChange={(e) =>\n              handleRadiusChange(\n                parseInt((e.target as HTMLInputElement)!.value)\n              )\n            }\n          />\n        </div>\n        {ripple ? (\n          <div className=\"slider-wrapper\">\n            <span>Ripple Delay</span>\n            <Slider\n              min={100}\n              max={1000}\n              step={100}\n              value={rippleDelay}\n              onChange={(e) =>\n                handleRippleDelayChange(\n                  parseInt((e.target as HTMLInputElement)!.value)\n                )\n              }\n            />\n          </div>\n        ) : null}\n      </div>\n      <Colors\n        backgroundColors={backgroundColors}\n        handleAddBgColor={handleAddBgColor}\n        handleRemoveBgColor={handleRemoveBgColor}\n      />\n      <div className=\"buttons-et-al\">\n        <div className=\"flex-row\">\n          <button\n            className=\"shape-button square\"\n            onClick={handleSquare}\n          ></button>\n          <button\n            className=\"shape-button ellipse\"\n            onClick={handleEllipse}\n          ></button>\n          <button\n            className=\"shape-button circle\"\n            onClick={handleCircle}\n          ></button>\n          <button className=\"rose\" onClick={handleRose}>\n            <img className=\"rose\" src={rose} alt=\"rose\"></img>\n          </button>\n        </div>\n        <div className=\"flex-row\">\n          <FormControlLabel\n            control={<Switch checked={ripple} onChange={handleToggleRipple} />}\n            label=\"Ripple\"\n            labelPlacement=\"top\"\n          />\n          <FormControlLabel\n            control={\n              <Switch\n                checked={isCyclingBgColor}\n                onChange={handleToggleColorCycle}\n              />\n            }\n            label=\"Cycle Color\"\n            labelPlacement=\"top\"\n          />\n          {isCyclingBgColor ? (\n            <>\n              <Select\n                value={bgColorCyclePattern}\n                onChange={(e) => handleBgColorPattern(e.target.value)}\n              >\n                <MenuItem value={'inward'}>Inward</MenuItem>\n                <MenuItem value={'outward'}>Outward</MenuItem>\n              </Select>\n              <Select\n                value={bgColorCycleSpeed}\n                onChange={(e) =>\n                  handleBgColorCycleSpeedChange(\n                    parseInt((e.target as HTMLInputElement)!.value)\n                  )\n                }\n              >\n                <MenuItem value={500}>Slow</MenuItem>\n                <MenuItem value={250}>Medium</MenuItem>\n                <MenuItem value={100}>Fast</MenuItem>\n                <MenuItem value={25}>EXTREME</MenuItem>\n              </Select>\n            </>\n          ) : null}\n        </div>\n        <div className=\"text-and-animation\">\n          <Select\n            value={animation}\n            onChange={(e) => handleAnimationChange(e.target.value)}\n          >\n            <MenuItem value={'spin'}>Spin</MenuItem>\n            <MenuItem value={'scan'}>Scan</MenuItem>\n            <MenuItem value={'coil'}>Coil</MenuItem>\n            <MenuItem value={'breathe'}>Breathe</MenuItem>\n            <MenuItem value={'none'}>None</MenuItem>\n          </Select>\n          <TextField\n            placeholder={'Add a word...'}\n            value={text}\n            variant=\"outlined\"\n            onChange={(e) => handleTextInput(e.target.value)}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport {\n  Word as SpeechWord,\n  SpeechSegment,\n  SpeechState,\n} from '@speechly/react-client';\n\ntype Props = {\n  segment?: SpeechSegment;\n  state: SpeechState;\n  onRecord: () => Promise<void>;\n};\n\nexport const Microphone = React.memo(\n  ({ state, segment, onRecord }: Props): JSX.Element => {\n    let enabled = false;\n    let text = 'Error';\n\n    switch (state) {\n      case SpeechState.Idle:\n      case SpeechState.Ready:\n        enabled = true;\n        text = 'Start';\n        break;\n      case SpeechState.Recording:\n        enabled = true;\n        text = 'Stop';\n        break;\n      case SpeechState.Connecting:\n      case SpeechState.Loading:\n        enabled = false;\n        text = 'Loading...';\n        break;\n    }\n\n    return (\n      <div>\n        <button onClick={onRecord} disabled={!enabled}>\n          {text}\n        </button>\n        <Transcript segment={segment} />\n      </div>\n    );\n  }\n);\n\nconst Transcript = React.memo(\n  ({ segment }: { segment?: SpeechSegment }): JSX.Element => {\n    if (segment === undefined) {\n      return (\n        <div>\n          <em>Hit start to speak a command...</em>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        {segment.words.map((w) => (\n          <Word word={w} key={w.index} />\n        ))}\n      </div>\n    );\n  }\n);\n\nconst Word = React.memo(({ word }: { word: SpeechWord }): JSX.Element => {\n  if (word.isFinal) {\n    return <strong>{`${word.value} `}</strong>;\n  }\n\n  return <span>{`${word.value} `}</span>;\n});\n","import { useEffect } from 'react';\nimport './App.css';\nimport { Nest } from './components/Nest';\nimport { Input } from './components/Input';\nimport { useState, useRef } from 'react';\nimport { Microphone } from './components/Microphone';\nimport { useSpeechContext, SpeechSegment } from '@speechly/react-client';\nimport {\n  IntentType,\n  parseIntent,\n  parseAttributeEntity,\n  parseShapeEntity,\n} from './parser';\nimport { cycleColorInward, cycleColorOutward } from './helpers/cycleColor';\n\n//test comment\n\nfunction App() {\n  const [depth, setDepth] = useState(40);\n  const [animation, setAnimation] = useState('spin');\n  const [scale, setScale] = useState(0.8);\n  const [speed, setSpeed] = useState(40);\n  const [size, setSize] = useState(25);\n  const [radius, setRadius] = useState(0);\n  const [squat, setSquat] = useState(1);\n  const [text, setText] = useState('');\n  const [inputDisplay, setInputDisplay] = useState(true);\n  const [ripple, setRipple] = useState(false);\n  const [baseRippleTime, setBaseRippleTime] = useState(500);\n  const [rippleDelay, setRippleDelay] = useState(300);\n  const [backgroundColors, setBackgroundColors] = useState(['#ffffff']);\n  const [isCyclingBgColor, setIsCyclingBgColor] = useState(false);\n  const [bgColorCyclePattern, setBgColorCyclePattern] = useState('inward');\n  const [bgColorCycleSpeed, setBgColorCycleSpeed] = useState(500);\n  const cycleIntervalRef: { current: number | null } = useRef(null);\n\n  const { toggleRecording, speechState, segment } = useSpeechContext();\n\n  useEffect(() => {\n    if (segment === undefined) return;\n\n    parseSegment(segment);\n  }, [segment]);\n\n  const handleBgColorCycleSpeedChange = (newSpeed: number) => {\n    setBgColorCycleSpeed(newSpeed);\n  };\n\n  const handleToggleColorCycle = () => {\n    setIsCyclingBgColor(!isCyclingBgColor);\n  };\n\n  const handleBgColorPattern = (pattern: string) => {\n    setBgColorCyclePattern(pattern);\n  };\n\n  const handleCycleBgColorInward = () => {\n    setBackgroundColors((prevColors) => cycleColorInward(prevColors));\n  };\n\n  const handleCycleBgColorOutward = () => {\n    setBackgroundColors((prevColors) => cycleColorOutward(prevColors));\n  };\n\n  const handleAddBgColor = (color: string) => {\n    const noDupes = new Set([...backgroundColors, color]);\n    setBackgroundColors(Array.from(noDupes));\n  };\n\n  const handleRemoveBgColor = (color: string) => {\n    const newColors = backgroundColors.filter((curColor) => curColor !== color);\n    setBackgroundColors(newColors);\n  };\n\n  const handleToggleRipple = () => {\n    setRipple(!ripple);\n  };\n\n  const handleDepthChange = (newDepth: number) => {\n    setDepth(newDepth);\n  };\n\n  const handleScaleChange = (newScale: number) => {\n    setScale(newScale);\n  };\n\n  const handleSpeedChange = (newSpeed: number) => {\n    setSpeed(newSpeed);\n  };\n\n  const handleSizeChange = (newSize: number) => {\n    setSize(newSize);\n  };\n\n  const handleSquatChange = (newSquat: number) => {\n    setSquat(newSquat);\n  };\n\n  const handleRadiusChange = (newRadius: number) => {\n    setRadius(newRadius);\n  };\n\n  const handleTextInput = (textInput: string) => {\n    setText(textInput);\n  };\n\n  const handleAnimationChange = (newAnimation: string) => {\n    setAnimation(newAnimation);\n  };\n\n  const handleRippleDelayChange = (newTime: number) => {\n    setRippleDelay(newTime);\n  };\n\n  const handleToggleInput = () => {\n    setInputDisplay(!inputDisplay);\n  };\n\n  const handleEllipse = () => {\n    setRadius(50);\n    setSquat(2);\n  };\n\n  const handleSquare = () => {\n    setRadius(0);\n    setSquat(1);\n  };\n\n  const handleCircle = () => {\n    setRadius(50);\n    setSquat(1);\n  };\n\n  const handleRose = () => {\n    setRadius(50);\n    setSquat(1.2);\n  };\n\n  const increaseSize = () => {\n    setSize((size) => {\n      const newSize = size * 1.1;\n      return newSize > 50 ? 50 : newSize;\n    });\n  };\n\n  const decreaseSize = () => {\n    setSize((size) => {\n      const newSize = size * 0.9;\n      return newSize < 10 ? 10 : newSize;\n    });\n  };\n\n  const increaseSpeed = () => {\n    setSpeed((speed) => {\n      const newSpeed = speed * 0.9;\n      return newSpeed < 5 ? 5 : newSpeed;\n    });\n  };\n\n  const decreaseSpeed = () => {\n    setSpeed((speed) => {\n      const newSpeed = speed * 1.1;\n      return newSpeed > 50 ? 50 : newSpeed;\n    });\n  };\n\n  const increaseBorderRadius = () => {\n    setRadius((radius) => {\n      if (radius === 0) return 10;\n      const newRadius = radius + 10;\n      if (newRadius > 50) return 50;\n      return newRadius;\n    });\n  };\n\n  const decreaseBorderRadius = () => {\n    setRadius((radius) => {\n      const newRadius = radius - 10;\n      return newRadius < 1 ? 0 : newRadius;\n    });\n  };\n\n  const increaseSquat = () => {\n    setSquat((squat) => {\n      const newSquat = squat + 2;\n      return newSquat > 10 ? 10 : newSquat;\n    });\n  };\n\n  const decreaseSquat = () => {\n    setSquat((squat) => {\n      const newSquat = squat - 2;\n      return newSquat < 1 ? 1 : newSquat;\n    });\n  };\n\n  const increaseScale = () => {\n    setScale((scale) => {\n      const newScale = scale + 0.02;\n      return newScale > 0.9 ? 0.9 : newScale;\n    });\n  };\n\n  const decreaseScale = () => {\n    setScale((scale) => {\n      const newScale = scale - 0.02;\n      return newScale > 0.7 ? 0.7 : newScale;\n    });\n  };\n\n  const increaseDepth = () => {\n    setDepth((depth) => {\n      const newDepth = depth + 10;\n      return newDepth > 60 ? 60 : newDepth;\n    });\n  };\n\n  const decreaseDepth = () => {\n    setDepth((depth) => {\n      const newDepth = depth - 5;\n      return newDepth < 1 ? 1 : newDepth;\n    });\n  };\n\n  const handleVoiceShape = (shape: string | undefined) => {\n    if (shape === undefined) return;\n\n    switch (shape) {\n      case 'square':\n        handleSquare();\n        break;\n      case 'ellipse':\n        handleEllipse();\n        break;\n      case 'circle':\n        handleCircle();\n        break;\n      case 'rose':\n        handleRose();\n        break;\n    }\n  };\n\n  const handleVoiceIncrease = (attribute: string | undefined) => {\n    if (attribute === undefined) return;\n\n    switch (attribute) {\n      case 'size':\n        increaseSize();\n        break;\n      case 'speed':\n        increaseSpeed();\n        break;\n      case 'roundness':\n        increaseBorderRadius();\n        break;\n      case 'squat':\n        increaseSquat();\n        break;\n      case 'scale':\n        increaseScale();\n        break;\n      case 'depth':\n        increaseDepth();\n        break;\n    }\n  };\n\n  const handleVoiceDecrease = (attribute: string | undefined) => {\n    if (attribute === undefined) return;\n\n    switch (attribute) {\n      case 'size':\n        decreaseSize();\n        break;\n      case 'speed':\n        decreaseSpeed();\n        break;\n      case 'roundness':\n        decreaseBorderRadius();\n        break;\n      case 'squat':\n        decreaseSquat();\n        break;\n      case 'scale':\n        decreaseScale();\n        break;\n      case 'depth':\n        decreaseDepth();\n        break;\n    }\n  };\n\n  const parseSegment = (segment: SpeechSegment) => {\n    const intent = parseIntent(segment);\n\n    switch (intent) {\n      case IntentType.SetShape:\n        const shape = parseShapeEntity(segment);\n        handleVoiceShape(shape);\n        break;\n      case IntentType.Increase:\n        const attributeInc = parseAttributeEntity(segment);\n        handleVoiceIncrease(attributeInc);\n        break;\n      case IntentType.Decrease:\n        const attributeDec = parseAttributeEntity(segment);\n        handleVoiceDecrease(attributeDec);\n        break;\n    }\n  };\n\n  const handleColorCycle = () => {\n    if (cycleIntervalRef.current)\n      window.clearInterval(cycleIntervalRef.current);\n\n    if (isCyclingBgColor) {\n      const id = window.setInterval(\n        bgColorCyclePattern === 'inward'\n          ? handleCycleBgColorInward\n          : handleCycleBgColorOutward,\n        bgColorCycleSpeed\n      );\n      cycleIntervalRef.current = id;\n    }\n  };\n\n  useEffect(() => {\n    handleColorCycle();\n  }, [isCyclingBgColor, bgColorCyclePattern, bgColorCycleSpeed]);\n\n  return (\n    <div className=\"app-wrapper\">\n      {inputDisplay ? null : (\n        <i\n          onClick={handleToggleInput}\n          className=\"fas fa-paint-brush display-input\"\n        ></i>\n      )}\n      <div className=\"main-container\">\n        <Input\n          inputDisplay={inputDisplay}\n          handleToggleInput={handleToggleInput}\n          size={size}\n          handleSizeChange={handleSizeChange}\n          depth={depth}\n          handleDepthChange={handleDepthChange}\n          scale={scale}\n          handleScaleChange={handleScaleChange}\n          speed={speed}\n          handleSpeedChange={handleSpeedChange}\n          squat={squat}\n          handleSquatChange={handleSquatChange}\n          radius={radius}\n          handleRadiusChange={handleRadiusChange}\n          handleToggleRipple={handleToggleRipple}\n          ripple={ripple}\n          rippleDelay={rippleDelay}\n          handleRippleDelayChange={handleRippleDelayChange}\n          handleSquare={handleSquare}\n          handleEllipse={handleEllipse}\n          handleCircle={handleCircle}\n          handleRose={handleRose}\n          animation={animation}\n          handleAnimationChange={handleAnimationChange}\n          text={text}\n          handleTextInput={handleTextInput}\n          handleAddBgColor={handleAddBgColor}\n          handleRemoveBgColor={handleRemoveBgColor}\n          backgroundColors={backgroundColors}\n          handleToggleColorCycle={handleToggleColorCycle}\n          isCyclingBgColor={isCyclingBgColor}\n          handleBgColorPattern={handleBgColorPattern}\n          bgColorCyclePattern={bgColorCyclePattern}\n          bgColorCycleSpeed={bgColorCycleSpeed}\n          handleBgColorCycleSpeedChange={handleBgColorCycleSpeedChange}\n        />\n        <div className={inputDisplay ? 'centered-with-input' : 'centered'}>\n          <Nest\n            depth={depth}\n            size={size}\n            speed={speed}\n            scale={scale}\n            text={text}\n            squat={squat}\n            radius={radius}\n            ripple={ripple}\n            rippleDelay={rippleDelay}\n            baseRippleTime={baseRippleTime}\n            animation={animation}\n            backgroundColors={backgroundColors}\n            currentColorIndex={0}\n          />\n        </div>\n      </div>\n      <Microphone\n        segment={segment}\n        state={speechState}\n        onRecord={toggleRecording}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","export const cycleColorInward = (colors: string[]) => {\n  if (colors.length < 2) return colors;\n\n  const colorsCopy = [...colors];\n\n  const last = colorsCopy.pop();\n\n  if (!last) return colors;\n\n  colorsCopy.unshift(last);\n\n  return colorsCopy;\n};\n\nexport const cycleColorOutward = (colors: string[]) => {\n  if (colors.length < 2) return colors;\n\n  const colorsCopy = [...colors];\n\n  const first = colorsCopy.shift();\n  if (!first) return colors;\n\n  colorsCopy.push(first);\n\n  return colorsCopy;\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { SpeechProvider } from '@speechly/react-client';\n\nReactDOM.render(\n  <React.StrictMode>\n    <SpeechProvider\n      appId=\"7ba0fae0-8f15-4bda-89ab-b6b592a85fdf\"\n      language=\"en-US\"\n    >\n      <App />\n    </SpeechProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}